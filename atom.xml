<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>二毛的博客</title>
  
  <subtitle>搬砖工的自我修养</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-20T02:26:50.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ermao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入了解Exif：数字照片中的元数据</title>
    <link href="http://example.com/2023/06/20/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Exif%EF%BC%9A%E6%95%B0%E5%AD%97%E7%85%A7%E7%89%87%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2023/06/20/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Exif%EF%BC%9A%E6%95%B0%E5%AD%97%E7%85%A7%E7%89%87%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE/</id>
    <published>2023-06-20T02:26:50.000Z</published>
    <updated>2023-06-20T02:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在数字相机和智能手机的普及下，我们每天都会拍摄大量的照片。这些照片中包含了很多有用的信息，例如拍摄日期、相机型号、曝光时间、光圈、ISO和GPS坐标等。Exif（Exchangeable image file format）是可交换图像文件的简称，是一种用于数字照片的元数据格式，它可以嵌入到JPEG、TIFF、RAW和其他图像文件格式中。Exif包含了有关图像的各种信息，可以帮助我们更好地管理和组织照片，并提供更多的信息来帮助我们了解照片的背景和拍摄条件。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Exif是一种嵌入在数字照片中的元数据格式，它是由日本电子工业发展协会（JEIDA）和日本相机工业协会（CIPA）共同开发的。Exif最初是为数码相机而设计的，但现在已经被广泛应用于智能手机、平板电脑等设备中。</p><p>Exif可以嵌入到JPEG、TIFF、RAW和其他图像文件格式中。Exif包含了有关图像的各种信息，例如拍摄日期、相机制造商、曝光时间、光圈、ISO和GPS坐标等。这些信息可以帮助我们更好地管理和组织照片，并提供更多的信息来帮助我们了解照片的背景和拍摄条件。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在Android中，我们可以使用ExifInterface类来读取和写入Exif信息。以下是一个示例代码片段，可以帮助您读取Exif信息：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ExifInterface exif = new ExifInterface(filePath);</span><br><span class="line">String make = exif.getAttribute(ExifInterface.TAG_MAKE);</span><br><span class="line">String model = exif.getAttribute(ExifInterface.TAG_MODEL);</span><br><span class="line">String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME);</span><br><span class="line">String exposureTime = exif.getAttribute(ExifInterface.TAG_EXPOSURE_TIME);</span><br><span class="line">String aperture = exif.getAttribute(ExifInterface.TAG_APERTURE);</span><br><span class="line">String iso = exif.getAttribute(ExifInterface.TAG_ISO);</span><br></pre></td></tr></table></figure><br>在上面的代码中，我们使用了ExifInterface类来读取照片中的Exif信息。我们使用了一些标签名称，例如“TAG_MAKE”、“TAG_MODEL”、“TAG_DATETIME”、“TAG_EXPOSURE_TIME”、“TAG_APERTURE”和“TAG_ISO”，以获取有关拍摄相机制造商、型号、拍摄日期、曝光时间、光圈和ISO等信息。</p><p>除此之外，我们还可以使用setAttribute()方法来写入自定义的Exif信息。以下是一个示例代码片段，可以帮助您写入自定义标签名称的Exif信息：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ExifInterface exif = new ExifInterface(filePath);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_DATETIME, &quot;2023:06:20 12:00:00&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_MAKE, &quot;Samsung&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_MODEL, &quot;Galaxy S10&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_EXPOSURE_TIME, &quot;1/100&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_APERTURE, &quot;f/2.4&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_ISO, &quot;100&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, &quot;37/1, 48/1, 0/1&quot;);</span><br><span class="line">exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, &quot;-122/1, -30/1, 0/1&quot;);</span><br><span class="line">exif.saveAttributes();</span><br></pre></td></tr></table></figure><br>在上面的代码中，我们使用了ExifInterface类来写入照片的各种信息，例如拍摄日期、相机制造商、曝光时间、光圈、ISO和GPS坐标等。您可以根据需要添加或删除属性。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>Exif信息嵌入在JPEG、TIFF、RAW和其他图像文件格式之中。这些文件格式通常包含文件头和图像数据两部分。文件头包含了有关文件格式和图像尺寸等信息，而图像数据则包含了实际的像素数据。在文件头中，有一个称为APP1的应用程序段，用于存储Exif信息。</p><p>APP1段是一个由16个字节组成的标识符“Exif\0\0”和一个TIFF格式的IFD（图像文件目录）组成的。IFD包含了各种标签，每个标签都包含了有关图像的一些信息。标签由标签号、类型、计数和值组成。其中标签号用于区分不同的标签，类型用于说明值的类型（例如整数、浮点数或字符串），计数用于说明值的数量（例如一个整数或一个数组），而值则是实际的数据。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Exif是一种用于数字照片的元数据格式，它可以嵌入到JPEG、TIFF、RAW和其他图像文件格式中。Exif包含了有关图像的各种信息，例如拍摄日期、相机型号、曝光时间、光圈、ISO和GPS坐标等。在Android中，我们可以使用ExifInterface类来读取和写入Exif信息。通过使用Exif，我们可以更好地管理和组织照片，并提供更多的信息来帮助我们了解照片的背景和拍摄条件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在数字相机和智能手机的普及下，我们每天都会拍摄大量的照片。这些照片中包含了很多有用的信息，例如拍摄日期、相机型号、曝光时间、光圈、ISO和G</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>reactNative生命周期详解</title>
    <link href="http://example.com/2023/06/09/reactNative%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2023/06/09/reactNative%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-06-09T07:55:40.000Z</published>
    <updated>2023-06-09T07:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>React Native组件的生命周期可以分为三个阶段：挂载阶段、更新阶段和卸载阶段。</strong></p><h1 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h1><p><code>constructor(props)</code>：组件被创建时调用，可以在这里初始化state对象或绑定成员函数的this指向。</p><p><code>static getDerivedStateFromProps(props, state)</code>：每次组件被重新渲染前都会调用，它可以返回一个对象来更新state，或者返回null来表示新props不需要更新state。</p><p><code>render()</code>：根据组件的props和state属性，生成虚拟DOM，即React元素。</p><p><code>componentDidMount()</code>：组件渲染完成后调用，通常在这里进行一些网络请求、添加订阅等操作。</p><h1 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h1><p><code>static getDerivedStateFromProps(props, state)</code>：和挂载阶段一样，在每次更新前都会被调用。</p><p><code>shouldComponentUpdate(nextProps, nextState)</code>：组件更新前会调用这个方法，它返回一个布尔值，表示是否允许更新，默认返回true。</p><p><code>render()</code>：同挂载阶段。</p><p><code>getSnapshotBeforeUpdate()</code>：在最近一次渲染输出（提交到DOM节点）之前调用，它可以在组件发生变化前捕获一些信息（例如滚动位置），并在 <code>componentDidUpdate()</code>中进行处理。</p><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code>：组件更新后调用，通常在这里进行一些DOM操作、网络请求等操作。</p><h1 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h1><p><code>componentWillUnmount()</code>：组件卸载前调用，通常在这里进行一些清理操作，例如取消网络请求、清除定时器等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;React Native组件的生命周期可以分为三个阶段：挂载阶段、更新阶段和卸载阶段。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;挂载阶段&quot;&gt;&lt;a href=&quot;#挂载阶段&quot; class=&quot;headerlink&quot; title=&quot;挂载阶段&quot;&gt;&lt;/a&gt;挂载阶段&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>「JavaScript基础」原型和原型链</title>
    <link href="http://example.com/2023/05/16/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://example.com/2023/05/16/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2023-05-16T14:14:45.000Z</published>
    <updated>2023-05-16T14:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从JavaScript开始流行到今天，学习它的人都会有个疑惑——JavaScript是不是面向对象语言？其实，ECMA-262早就给出了答案，在ECMAScript的第一个版本中就明确指出，ECMAScript是一种面向对象的语言，参见如下引文：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment.</span><br></pre></td></tr></table></figure><br>既然ECMAScript是面向对象的，那么JavaScript作为ECMAScript的一个分支，当然也是一种面向对象的语言。常见的C#、Java这样面向对象语言是基于类（class-based）的面向对象，而<strong>JavaScript是基于原型（prototype-based）的面向对象。</strong></p><h1 id="基于原型的继承"><a href="#基于原型的继承" class="headerlink" title="基于原型的继承"></a>基于原型的继承</h1><p>对于使用过基于类的语言 (如 Java 或 C++) 的开发者们来说，JavaScript 实在是有些令人困惑 —— JavaScript 是动态的，本身不提供一个 class 的实现。即便是在 ES2015/ES6 中引入了 class 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。</p><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。<br>我们先来看几个例子<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person = new Person();</span><br><span class="line">person.name = &#x27;二毛&#x27;;</span><br><span class="line">console.log(person.name) // 二毛</span><br></pre></td></tr></table></figure><br>上述例子，Person被视为一个构造函数，通过new关键字实例化了对象<code>person</code>，可以看到 JavaScript 可以直接为对象构造器未声明的属性复制。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person = new Person();</span><br><span class="line">person.name = &#x27;二毛&#x27;;</span><br><span class="line">console.log(person.name) // 二毛</span><br><span class="line"></span><br><span class="line">Person.prototype.age = 18;</span><br><span class="line">var person1 = new Person();</span><br><span class="line">var person2 = new Person();</span><br><span class="line"></span><br><span class="line">console.log(person.age) // 18</span><br><span class="line">console.log(person1.age) // 18</span><br><span class="line">console.log(person2.age) // 18</span><br></pre></td></tr></table></figure><br>每个函数都有一个 <code>prototype</code> 属性, 函数的 <code>prototype</code> 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是上述例子中的person, person1 和 person2 的原型。那什么是原型呢？可以这样理解：<strong>每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型继承属性。</strong><br>用一张图来表示他们的关系：<br><img src="/2023/05/16/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/image1.png" class="" title="原型链关系图1"><br>上图显示了构造函数与实例原型之间的关系，那么实例又是访问到实例原型的呢？你需要了解实例对象的一个隐式属性 <code>__proto__</code></p><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫 <code>__proto__</code>，这个属性会指向该对象的原型。<br>尝试运行以下代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person = new Person();</span><br><span class="line">console.log(person.__proto__ === Person.prototype); // true</span><br></pre></td></tr></table></figure><br>到此，我们可以更新一下上述关系图<br><img src="/2023/05/16/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/image2.png" class="" title="原型链关系图2"></p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>每个原型都存在一个属性 constructor，该属性指向其关联的构造函数。<br>尝试运行以下代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(Person === Person.prototype.constructor); // true</span><br></pre></td></tr></table></figure><br>我们可以把 constructor 更新到上述关系图中<br><img src="/2023/05/16/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/image3.png" class="" title="原型链关系图3"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型其实也是一个对象，既然是对象，那么他的原型又是什么呢？可以运行一下以下的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">const person = new Person();</span><br><span class="line">console.log(Person.prototype.__proto__ === Object.prototype) //true</span><br><span class="line">console.log(Object.prototype.__proto__) //null</span><br></pre></td></tr></table></figure><br>可以发现 <code>Person.prototype</code>对象的原型其实就是 <code>Object</code> 的原型，换句话说， <code>person</code> 对象的<code>__proto__</code> 是 <code>Person.prototype</code>，<code>person</code> 的 <code>__proto__</code>的<code>__proto___</code>是<code>Object.prototype</code>，而 <code>Object.prototype</code> 的原型 <code>__proto__</code> 就是 null 了。<br>最后补充上原型链的访问，关系图可以更新为如下：<br><img src="/2023/05/16/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/image4.png" class="" title="原型链关系图4"></p><p>到此，我们可以不妨再回头再重新理解一下这段话“<strong>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</strong>”</p><h1 id="使用不同的方式来创建对象和生成原型链"><a href="#使用不同的方式来创建对象和生成原型链" class="headerlink" title="使用不同的方式来创建对象和生成原型链"></a>使用不同的方式来创建对象和生成原型链</h1><h2 id="使用语法结构创建的对象"><a href="#使用语法结构创建的对象" class="headerlink" title="使用语法结构创建的对象"></a>使用语法结构创建的对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;a: 1&#125;;</span><br><span class="line"></span><br><span class="line">// o 这个对象继承了 Object.prototype 上面的所有属性</span><br><span class="line">// Object.prototype 的原型为 null</span><br><span class="line">// 原型链如下：</span><br><span class="line">// o ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">var a = [&quot;yo&quot;, &quot;whadup&quot;, &quot;?&quot;];</span><br><span class="line"></span><br><span class="line">// 数组都继承于 Array.prototype</span><br><span class="line">// (Array.prototype 中包含 indexOf, forEach 等方法)</span><br><span class="line">// 原型链如下：</span><br><span class="line">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">function f()&#123;</span><br><span class="line">  return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 函数都继承于 Function.prototype</span><br><span class="line">// (Function.prototype 中包含 call, bind 等方法)</span><br><span class="line">// 原型链如下：</span><br><span class="line">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">const person=&#123;</span><br><span class="line">    name: &#x27;二毛&#x27;,</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        age: 18,</span><br><span class="line">        getMoney: ()=&gt;&#123;</span><br><span class="line">            return &quot;100w&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// person这个对象有自己的隐式原型对象，由__proto__主动</span><br><span class="line">// 声明， 所以他的原型链如下：</span><br><span class="line">// person -&gt; &#123; age: 18, getMoney: ()=&gt;&#123; return &quot;100w&quot; &#125; &#125; -&gt; Object.prototype -&gt; null</span><br></pre></td></tr></table></figure><h2 id="使用构造器创建的对象"><a href="#使用构造器创建的对象" class="headerlink" title="使用构造器创建的对象"></a>使用构造器创建的对象</h2><p>在 JavaScript 中，构造器其实就是一个普通的函数。当使用 new操作符 来作用这个函数时，它就可以被称为构造函数。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">  this.name = &#x27;二毛&#x27;;</span><br><span class="line">  this.age = 18;</span><br><span class="line">  this.deposits = 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  increase: function(v)&#123;</span><br><span class="line">    this.deposits+=v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var ermao = new Person();</span><br><span class="line">// ermao 是生成的对象，他的自身属性有 &#x27;name&#x27; , &#x27;age&#x27; 和 &#x27;deposits&#x27;。</span><br><span class="line">// 在 ermao 被实例化时，ermao.[[Prototype]] 指向了 Person.prototype。添加了一个 increase 方法</span><br></pre></td></tr></table></figure></p><h2 id="使用-Object-create-创建的对象"><a href="#使用-Object-create-创建的对象" class="headerlink" title="使用 Object.create 创建的对象"></a>使用 Object.create 创建的对象</h2><p>ECMAScript 5 中引入了一个新方法：<code>Object.create()</code>。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;a: 1&#125;;</span><br><span class="line">// a ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">var b = Object.create(a);</span><br><span class="line">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span><br><span class="line">console.log(b.a); // 1 (继承而来)</span><br><span class="line"></span><br><span class="line">var c = Object.create(b);</span><br><span class="line">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">var d = Object.create(null);</span><br><span class="line">// d ---&gt; null</span><br><span class="line">console.log(d.hasOwnProperty); // undefined，因为 d 没有继承 Object.prototype</span><br></pre></td></tr></table></figure></p><h2 id="使用-class-关键字创建的对象"><a href="#使用-class-关键字创建的对象" class="headerlink" title="使用 class 关键字创建的对象"></a>使用 class 关键字创建的对象</h2><p>ECMAScript6 引入了一套新的关键字用来实现 class。使用基于类语言的开发人员会对这些结构感到熟悉。但它们仍然是基于 JavaScript 原型实现的，对于 JavaScript 来说属于一种语法糖。这些新的关键字包括 class, constructor，static，extends 以及 super。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  constructor(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Man extends Person &#123;</span><br><span class="line">  constructor(name, age) &#123;</span><br><span class="line">    super(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  get name() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">  set age(age) &#123;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var zhangsan = new Man(&#x27;zhangsan&#x27;, 20);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="原型的性能"><a href="#原型的性能" class="headerlink" title="原型的性能"></a>原型的性能</h1><p>在原型链上查找属性比较耗时，对性能有副作用，在性能要求苛刻的情况下考虑较少的遍历会变得很重要。此外，访问不存在的属性时会遍历整个原型链。</p><p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。要检查对象是否具有自己定义的属性，而不是其原型链上的某个属性，可以使用对象从 Object.prototype 继承的 hasOwnProperty方法。（或者Object.keys()方法）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(ermao.hasOwnProperty(&#x27;name&#x27;)); // true</span><br><span class="line">console.log(ermao.__proto__.hasOwnProperty(&#x27;increase&#x27;)); // true</span><br></pre></td></tr></table></figure><br>有一个小点需要注意的是我们不能通过判断属性是否为 <code>undefined</code> 来判断其是否存在，因为在某些情况下该属性可能存在，但其值恰好被设置成了 <code>undefined</code>。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在使用原型继承编写复杂代码之前，理解原型继承模型是至关重要的。此外，请注意代码中原型链的长度，并在必要时将其分解，以避免可能的性能问题。此外，原生原型不应该被扩展，除非它是为了与新的 JavaScript 特性兼容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从JavaScript开始流行到今天，学习它的人都会有个疑惑——JavaScript是不是面向对象语言？其实，ECMA-262早就给出了答案</summary>
      
    
    
    
    
    <category term="JavaScript基础" scheme="http://example.com/tags/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>「JavaScript基础」作用域和闭包</title>
    <link href="http://example.com/2023/05/08/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2023/05/08/%E3%80%8CJavaScript%E5%9F%BA%E7%A1%80%E3%80%8D%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</id>
    <published>2023-05-08T13:15:23.000Z</published>
    <updated>2023-05-08T13:15:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><strong>作用域：</strong> 指代码当前控制着变量和函数的可见性和生命周期。作用是隔离变量，不同作用域下同名变量相同不会冲突。</li><li><strong>作用域链：</strong> 指如果在当前作用域中没有查到变量，就会向上级作用域查询，直到全局作用域。这样的查找过程就形成了一个查询链条，这样的链条被称之为作用域链。子作用域可以访问父作用域，反之则不行。<br><br>作用域具体可细分为四种：<strong>全局作用域、模块作用域、函数作用域、块级作用域</strong><br></li><li><strong>全局作用域</strong>： 代码在程序的任何地方都能被访问，例如 window （浏览器），global（node环境）对象。但全局变量会污染全局命名空间，容易引起命名冲突。在没有模块开发概念的上古前端时代，命名污染是一种常见的错误。</li><li><strong>模块作用域</strong>： 早期 js 中没有模块的概念，因为脚本简单。后来随着脚本越来越复杂，就出现了模块化方案（AMD、CJS、UMD、ES6模块等）。通常一个模块就是一个文件或者脚本，这个模块拥有独立的模块作用域。</li><li><strong>函数作用域</strong>： 由函数创建形成的作用域。</li><li><strong>块级作用域</strong>： js 存在变量提升的概念，形成变量覆盖、变量污染等设计缺陷，所以 ES6 引入了块级作用域关键字来解决这类问题。最经典的案例就是 for 循环。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 变量提升</span><br><span class="line">function foo()&#123;</span><br><span class="line">    a = 10; // 省略声明变量，自动变量提升</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">console.log(a); // 10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量提升</span><br><span class="line">console.log(a); // undefined</span><br><span class="line">var a = 10;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// var</span><br><span class="line">for(var i=0; i&lt;100; i++) &#123;</span><br><span class="line">    // do anything</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); </span><br><span class="line">// 运行结果</span><br><span class="line">100</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// let</span><br><span class="line">for(let i=0; i&lt;100; i++) &#123;</span><br><span class="line">     // do anything</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); </span><br><span class="line">// 运行结果</span><br><span class="line">Uncaught ReferenceError: i is not defined</span><br></pre></td></tr></table></figure><h2 id="和Java对比（闲谈）"><a href="#和Java对比（闲谈）" class="headerlink" title="和Java对比（闲谈）"></a>和Java对比（闲谈）</h2>当然，Java肯定也有作用域的概念（内心os:废话，什么编程语言没有作用域的概念呢）。<strong>任何程序设计语言都有作用域的概念，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。</strong> 但是Java的控制似乎更加精细。Java程序入口从main函数开始，所以没有全局作用域的概念。<br>在Java中，我们经常看到<code>public</code>、<code>protected</code>、<code>private</code>这些修饰符。在Java中，这些修饰符可以用来限定访问作用域，这可以类比JS中的模块作用域。而函数作用域和块级作用域的概念是一致的。<h3 id="public"><a href="#public" class="headerlink" title="public"></a><strong>public</strong></h3>定义为<code>public</code>的<code>class</code>、<code>interface</code>可以被其他任何类访问：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public void sayHi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面的HelloWorld是public，因此，可以被其他包的类访问：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package xyz;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">    void foo() &#123;</span><br><span class="line">        // Main可以访问HelloWorld</span><br><span class="line">        HelloWorld h = new HelloWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>定义为<code>public</code>的<code>field</code>、<code>method</code>可以被其他类访问，前提是首先有访问<code>class</code>的权限：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public void sayHi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面的<code>sayHi()</code>方法是<code>public</code>，可以被其他类调用，前提是首先要能访问HelloWorld类：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package xyz;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">    void foo() &#123;</span><br><span class="line">        HelloWorld h = new HelloWorld();</span><br><span class="line">        h.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="private"><a href="#private" class="headerlink" title="private"></a><strong>private</strong></h3>定义为<code>private</code>的<code>field</code>、<code>method</code>无法被其他类访问：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    public void borrowMoney(int value) &#123;</span><br><span class="line">        if(value&gt; balance())&#123;</span><br><span class="line">            System.out.println(&quot;没钱!&quot;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;借给你!&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 不能被其他类调用(个人存款，太穷了不能让别人看到)</span><br><span class="line">    private int balance() &#123;</span><br><span class="line">        return 0.01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>确切地说，<code>private</code>访问权限被限定在<code>class</code>的内部，而且与方法声明顺序无关。推荐把<code>private</code>方法放到后面，因为<code>public</code>方法定义了类对外提供的功能，阅读代码的时候，应先关注<code>public</code>方法。<br>由于 Java 支持嵌套类，如果一个类内部还定义了嵌套类，那么，嵌套类拥有访问<code>private</code>的权限：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Inner i = new Inner();</span><br><span class="line">        i.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // private方法:</span><br><span class="line">    private static void hello() &#123;</span><br><span class="line">        System.out.println(&quot;a private hello method!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 静态内部类:</span><br><span class="line">    static class Inner &#123;</span><br><span class="line">        public void sayHi() &#123;</span><br><span class="line">            Main.hello();// 我是内部类，所以我能访问Main的私有方法</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a><strong>protected</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    // protected方法:</span><br><span class="line">    protected void sayHi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    private void balance() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面的<code>protected</code>方法可以被继承的类访问：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package xyz;</span><br><span class="line"></span><br><span class="line">class Main extends Person &#123;</span><br><span class="line">    void foo() &#123;</span><br><span class="line">        // 可以访问protected方法:</span><br><span class="line">        sayHi();</span><br><span class="line">        // 发生编译错误，不能访问private方法</span><br><span class="line">        balance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="package"><a href="#package" class="headerlink" title="package"></a><strong>package</strong></h3>最后，包作用域是指一个类允许访问同一个<code>package</code>的没有<code>public</code>、<code>private</code>修饰的<code>class</code>，以及没有<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line">// package权限的类:</span><br><span class="line">class Person &#123;</span><br><span class="line">    // package权限的方法:</span><br><span class="line">    void sayHi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>只要在同一个包，就可以访问<code>package</code>权限的<code>class</code>、<code>field</code>和<code>method</code>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">    void foo() &#123;</span><br><span class="line">        // 可以访问package权限的类:</span><br><span class="line">        Person p = new Person();</span><br><span class="line">        // 可以调用package权限的方法:</span><br><span class="line">        p.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注意，包名必须完全一致</li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h3><p>Java还提供了一个<code>final</code>修饰符。<code>final</code>与访问权限存在一定的关联。</p><p>用<code>final</code>修饰的<code>class</code>可以阻止被继承：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">// 无法被继承:</span><br><span class="line">public final class Person &#123;</span><br><span class="line">    private int n = 0;</span><br><span class="line">    protected void sayHi(int t) &#123;</span><br><span class="line">        long i = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public Main extends Person &#123;&#125;  // error!,无法继承</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>用<code>final</code>修饰<code>method</code>可以阻止被子类覆写(override)：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    // 无法被覆写:</span><br><span class="line">    protected final void sayHi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Main extends Person &#123;</span><br><span class="line">    // error! 无法被覆写:</span><br><span class="line">    protected final void sayHi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>用<code>final</code>修饰<code>field</code>可以阻止被重新赋值：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private final int n = 0;</span><br><span class="line">    protected void sayHi() &#123;</span><br><span class="line">        this.n = 1; // error!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>用<code>final</code>修饰局部变量可以阻止被重新赋值（类比js中的const）：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package abc;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    protected void sayHi(final int i) &#123;</span><br><span class="line">        i = 1; // error!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a><strong>变量提升</strong></h3><p>  Java中没有变量提升的概念<br><br></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p> <strong>闭包</strong>：<strong>闭包是捆绑在一起（封闭）的函数与其周围状态（词法环境）的引用的组合</strong>。 换句话说，闭包使您可以从内部函数访问外部函数的作用域。 在 JavaScript 中，每次创建函数时都会在函数创建时创建闭包。<br>可以看出闭包是函数作用域下的产物，闭包会随着外层函数的执行而被同时创建。<strong>它是一个</strong>函数以及其捆绑的周边环境状态的引用的<strong>组合</strong>。换而言之，闭包是内层函数对外层函数变量的不释放。<br><strong>闭包的特征：</strong></p><ul><li>函数中存在函数；</li><li>内部函数可以访问外层函数的作用域；</li><li>参数和变量不会被 GC，始终驻留在内存中；</li><li>有内存地方才有闭包。</li></ul><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>考虑以下示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function init()&#123;</span><br><span class="line">   var name = &quot;二毛&quot;; // name 是 init 创建的局部变量</span><br><span class="line">   function displayName()&#123;</span><br><span class="line">     // displayName() 是构成闭包的内部函数</span><br><span class="line">     console.log(name) // 使用在父函数中声明的变量</span><br><span class="line">   &#125;</span><br><span class="line">   displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>其中<code>init()</code> 创建一个名为 <code>name</code> 的局部变量和一个名为 <code>displayName()</code> 的函数。 <code>displayName()</code> 函数是在 <code>init()</code> 内部定义的内部函数，仅在 <code>init()</code> 函数体内可用。 请注意，<code>displayName()</code> 函数没有自己的局部变量。 但是，由于内部函数可以访问外部函数的变量，<code>displayName()</code> 可以访问在父函数 <code>init()</code> 中声明的变量名。</p><p>故<code>displayName()</code> 函数中的 <code>console.log()</code> 语句成功显示了名称变量的值，该变量在其父函数中声明。 这就是一个词法作用域的例子，它描述了解析器如何在函数嵌套时解析变量名。 词法一词指的是词法作用域使用源代码中声明变量的位置来确定该变量可用的位置。 <strong>嵌套函数可以访问在其外部作用域中声明的变量</strong>。</p><p>在此示例中，作用域是函数作用域，因为该变量是可访问的，并且只能在声明它的函数体内访问。</p><h2 id="用-let-和-const-限定作用域"><a href="#用-let-和-const-限定作用域" class="headerlink" title="用 let 和 const 限定作用域"></a>用 let 和 const 限定作用域</h2><p>在 ES6 之前，JavaScript 只有两种作用域：函数作用域和全局作用域。 用 var 声明的变量要么是函数作用域的，要么是全局作用域的，这取决于它们是在函数内还是在函数外声明。 因为带有花括号的块不会创建作用域，有些事情看起可能会很麻烦：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (Math.random() &gt; 0.5) &#123;</span><br><span class="line">   var x = 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">   var x = 2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(x);</span><br></pre></td></tr></table></figure></p><p>对于使用块级创建作用域的其他语言（例如 C、Java）的人来说，上面的代码应该在 <code>console.log</code> 行上抛出错误，因为 <code>x</code> 在两个语法块的范围外。 但是，因为块不为 var 创建作用域，所以这里的 var 语句实际上创建了一个全局变量。 下面还介绍了一个实际示例，说明这与闭包结合使用时如何导致实际错误。</p><p>在 ES6 中，JavaScript 引入了 let 和 const 声明，其中包括TDZ（Temporal dead zone）等特性，允许您创建块作用域变量。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (Math.random() &gt; 0.5) &#123;</span><br><span class="line">   const x = 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">   const x = 2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(x) // ReferenceError: x is not defined</span><br></pre></td></tr></table></figure><br>本质上，块最终在 ES6 中被视为作用域，但前提是您使用 let 或 const 声明变量。 此外，ES6 引入了模块，引入了另一种作用域(模块作用域)。 闭包能够捕获所有这些范围内的变量，我们将在后面介绍。</p><h2 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h2><p>考虑以下代码示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">   const name = &quot;二毛&quot;;</span><br><span class="line">   function displayName() &#123;</span><br><span class="line">     console.log(name);</span><br><span class="line">   &#125;</span><br><span class="line">   return displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myFunc = func();</span><br><span class="line">myFunc();</span><br></pre></td></tr></table></figure><br>此代码与上面 <code>init()</code> 函数的前一个示例具有完全相同的效果。 不同的是 <code>displayName()</code> 内部函数在执行之前从外部函数返回。</p><p>乍一看，这段代码仍然有效似乎不符合直觉。 在某些编程语言中，函数内的局部变量仅在函数执行期间存在。 一旦 <code>func()</code> 完成执行，您可能希望 <code>name</code> 变量将不再可访问。 然而，代码仍然按预期工作，这显然在 JavaScript 中是不同的情况。</p><p>原因是 JavaScript 中的函数形成了闭包。 <strong>闭包是函数和声明该函数的词法环境的组合。</strong> 此环境由创建闭包时范围内的任何局部变量组成。 在这种情况下，<code>myFunc</code> 是对运行 <code>func</code> 时创建的函数 <code>displayName</code> 实例的引用。 <code>displayName</code> 的实例维护对其<strong>词法环境</strong>的引用，其中存在变量名称。 因此，当调用 myFunc 时，变量名仍然可用，并且“二毛”被传递到 <code>console.log</code>。</p><p>另一个例子 productAdder 函数：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function productAdder(x) &#123;</span><br><span class="line">   return function(y)&#123;</span><br><span class="line">     return x + y;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const add10 = productAdder(10);</span><br><span class="line">const add20 = productAdder(20);</span><br><span class="line"></span><br><span class="line">console.log(add10(1)); // 11</span><br><span class="line">console.log(add20(1)); // 21</span><br></pre></td></tr></table></figure><br>在这个例子中，我们定义了一个函数 <code>productAdder(x)</code>，它接受一个参数 <code>x</code>，并返回一个新函数。 它返回的函数接收单个参数 <code>y</code>，并返回 <code>x</code> 和 <code>y</code> 的总和。<code>productAdder(x)</code> 是一个函数工厂。 它创建可以为其参数添加特定值的函数。 在上面的示例中，函数工厂创建了两个新函数——一个将参数加 10，另一个将参数加 20。</p><p>此处<code>add10</code> 和 <code>add20</code> 都形成闭包。 它们共享相同的函数体定义，但存储不同的词法环境。 在 <code>add10</code> 的词法环境中，x 是 10，而在 <code>add20</code> 的词法环境中，x 是 20。</p><h2 id="闭包作用域链-（Closure-scope-chain）"><a href="#闭包作用域链-（Closure-scope-chain）" class="headerlink" title="闭包作用域链 （Closure scope chain）"></a>闭包作用域链 （Closure scope chain）</h2><p>每个闭包都有三个作用域：</p><ul><li>本地作用域</li><li>封闭作用域（可以是块、函数或模块范围）</li><li>全局作用域<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// global scope</span><br><span class="line">const e = 10;</span><br><span class="line">function sum(a) &#123;</span><br><span class="line">    // outer functions scope</span><br><span class="line">  return function (b) &#123;</span><br><span class="line">    // outer functions scope</span><br><span class="line">    return function (c) &#123;</span><br><span class="line">      // outer functions scope</span><br><span class="line">      return function (d) &#123;</span><br><span class="line">        // local scope</span><br><span class="line">        return a + b + c + d + e;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1)(2)(3)(4)); // 20</span><br></pre></td></tr></table></figure>也可以显示指定函数名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// global scope</span><br><span class="line">const e = 10;</span><br><span class="line">function sum(a) &#123;</span><br><span class="line">    // outer functions scope</span><br><span class="line">  return function func1(b) &#123;</span><br><span class="line">    // outer functions scope</span><br><span class="line">    return function func2(c) &#123;</span><br><span class="line">      // outer functions scope</span><br><span class="line">      return function func3(d) &#123;</span><br><span class="line">        // local scope</span><br><span class="line">        return a + b + c + d + e;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const sum2 = sum(1);</span><br><span class="line">const sum3 = sum2(2);</span><br><span class="line">const sum4 = sum3(3);</span><br><span class="line">const result = sum4(4);</span><br><span class="line">console.log(result); // 20</span><br></pre></td></tr></table></figure>在上面的示例中，有一系列嵌套函数，所有这些函数都可以访问外部函数的范围。 在这种情况下，我们可以说闭包可以访问所有外部函数范围。<code>local scope-&gt;outer functions scope-&gt;global scope</code>便形成一个作用域链。</li></ul><p>闭包也可以关闭导入的值，这被视为实时绑定，因为当原始值更改时，导入的值也会相应更改。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// moduleX.js</span><br><span class="line">export let x = 1;</span><br><span class="line">export const setX = (value) =&gt; &#123;</span><br><span class="line">  x = value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// closureModule.js</span><br><span class="line">import &#123; x &#125; from &quot;./moduleX.js&quot;;</span><br><span class="line"></span><br><span class="line">export const getX = () =&gt; x; // 实时绑定</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; getX &#125; from &quot;./closureModule.js&quot;;</span><br><span class="line">import &#123; setX &#125; from &quot;./moduleX.js&quot;;</span><br><span class="line"></span><br><span class="line">console.log(getX()); // 1</span><br><span class="line">setX(2);</span><br><span class="line">console.log(getX()); // 2</span><br></pre></td></tr></table></figure></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>如上所述，每个函数实例管理自己的作用域和闭包。 因此，如果特定任务不需要闭包，则在其他函数中不必要地创建函数是不明智的，因为闭包会在处理速度和内存消耗方面对脚本性能产生负面影响。</p><p>例如，当创建一个新的对象/类时，方法通常应该关联到对象的原型而不是定义到对象构造函数中。 原因是无论何时调用构造函数，都会重新分配方法（即，每个对象创建单独的方法）。<br>举例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">  this.name = name.toString();</span><br><span class="line">  this.age = age.toString();</span><br><span class="line">  this.getName = function () &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  this.getAge = function () &#123;</span><br><span class="line">    return this.age;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这种情况其实在多个实例的创建中会在性能上产生负面影响，是不必要的闭包逻辑。改为如下例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">  this.name = name.toString();</span><br><span class="line">  this.age = age.toString();</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = function () &#123;</span><br><span class="line">  return this.name;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.getAge = function () &#123;</span><br><span class="line">  return this.age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>继承的原型可以由所有对象共享，并且方法定义不需要在每个对象创建时都出现。</p><h2 id="闭包使用场景"><a href="#闭包使用场景" class="headerlink" title="闭包使用场景"></a>闭包使用场景</h2><p>闭包很有用，因为它们可以让您将数据（词法环境）与操作该数据的函数相关联。 这与面向对象的编程有明显的相似之处，其中对象允许您将数据（对象的属性）与一个或多个方法相关联。</p><p>因此，您可以在通常只使用一个方法的对象的任何地方使用闭包。</p><h3 id="异步场景"><a href="#异步场景" class="headerlink" title="异步场景"></a>异步场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// demo1 输出 3 3 3</span><br><span class="line">for(var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// demo2 输出 0 1 2</span><br><span class="line">for(let i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo1 输出结果为:3 3 3，因为 <code>var</code> 定义的变量i会发生变量提升，所以实际i是一个全局作用域的变量，同时 <code>setTimeout</code> 是一个异步回调。因此，当执行 <code>setTimeout</code> 时， <code>i</code> 的值已经是 3，导致 3 3 3 被打印到控制台。 demo2 输出结果为：0 1 2， <code>let</code> 关键字在 for-loop 中形成块级作用域，为循环的每次迭代创建一个新绑定，因此每个 <code>setTimeout</code> 都可以访问 <code>i</code> 的正确值。</p><h3 id="用闭包模拟私有方法"><a href="#用闭包模拟私有方法" class="headerlink" title="用闭包模拟私有方法"></a>用闭包模拟私有方法</h3><p>Java 等语言允许您将方法声明为私有的，这意味着它们只能由同一类中的其他方法调用。</p><p>在类出现之前，JavaScript 没有声明私有方法的本机方式，但可以使用闭包模拟私有方法。 私有方法不仅仅用于限制对代码的访问。 它们还提供了一种管理全局名称空间的强大方法。</p><p>下面的代码说明了如何使用闭包来定义可以访问私有函数和变量的公共函数。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const counter = (function () &#123;</span><br><span class="line">  let _counter = 0;</span><br><span class="line">  function change(value) &#123;</span><br><span class="line">    _counter += value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      change(1);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    decrement() &#123;</span><br><span class="line">      change(-1);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    value() &#123;</span><br><span class="line">      return _counter;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">console.log(counter.value()); // 0.</span><br><span class="line">counter.increment();</span><br><span class="line">counter.increment();</span><br><span class="line">console.log(counter.value()); // 2.</span><br><span class="line">counter.decrement();</span><br><span class="line">console.log(counter.value()); // 1.</span><br></pre></td></tr></table></figure><br>在之前的示例中，每个闭包都有自己的词法环境。 不过，这里有一个由三个函数共享的词法环境：counter.increment、counter.decrement 和 counter.value。</p><p>共享词法环境是在匿名函数主体中创建的，该函数在定义后立即执行（也称为 IIFE）。 词法环境包含两个私有项：一个为 <code>_counter</code> 的变量和一个称为 <code>change</code> 的函数。 您不能从匿名函数外部访问这些私有成员。 代替的是，您可以使用从匿名包装器返回的三个公共函数来访问它们。</p><p>这三个公共函数形成了共享相同词法环境的闭包。 由于 JavaScript 的词法作用域，它们都可以访问 <code>_counter</code> 变量和 <code>change</code> 函数。<br><br>我们也可以通过改写IIFE的格式，来形成多实例各自共享词法环境。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const productCounter = function () &#123;</span><br><span class="line">  let _counter = 0;</span><br><span class="line">  function change(value) &#123;</span><br><span class="line">    _counter += value;</span><br><span class="line">  &#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      change(1);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    decrement() &#123;</span><br><span class="line">      change(-1);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    value() &#123;</span><br><span class="line">      return _counter;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const counter1 = productCounter();</span><br><span class="line">const counter2 = productCounter();</span><br><span class="line"></span><br><span class="line">console.log(counter1.value()); // 0.</span><br><span class="line">counter1.increment();</span><br><span class="line">counter1.increment();</span><br><span class="line">console.log(counter1.value()); // 2.</span><br><span class="line">console.log(counter2.value()); // 0.</span><br><span class="line"></span><br><span class="line">counter1.decrement();</span><br><span class="line">console.log(counter1.value()); // 1.</span><br><span class="line">console.log(counter2.value()); // 0.</span><br></pre></td></tr></table></figure><br>counter1 和 counter2 形成两个独立的闭包，他们共享独立的词法环境，在一个闭包中更改变量值不会影响另一个闭包中的值。</p><h2 id="和Java对比（闲谈）-1"><a href="#和Java对比（闲谈）-1" class="headerlink" title="和Java对比（闲谈）"></a>和Java对比（闲谈）</h2><p>Java 没有真正可以类比的闭包概念， groovy倒是有Closure的语法。不过都是基于JVM的语言，真正还是生成了匿名内部类。Java8的Lambda表达式可能和闭包写法相同。<br>Java8之前<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String[] oldWay = &quot;Improving code with Lambda expressions in Java 8&quot;.split(&quot; &quot;);</span><br><span class="line">Arrays.sort(oldWay, new Comparator&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compare(String s1, String s2) &#123;</span><br><span class="line">        // 忽略大小写排序:</span><br><span class="line">        return s1.toLowerCase().compareTo(s2.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(String.join(&quot;, &quot;, oldWay));</span><br></pre></td></tr></table></figure><br>对于只有一个方法的接口，在Java 8中，现在可以把它视为一个函数，用lambda表示式简化如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] newWay = &quot;Improving code with Lambda expressions in Java 8&quot;.split(&quot; &quot;);</span><br><span class="line">Arrays.sort(newWay, (s1, s2) -&gt; &#123;</span><br><span class="line">    return s1.toLowerCase().compareTo(s2.toLowerCase());</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(String.join(&quot;, &quot;, newWay));</span><br></pre></td></tr></table></figure><br>实际上，lambda表达式最终也被编译为一个实现类，不过语法上做了简化。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作用域和闭包是 JavaScript 中基础且非常重要的概念，作用域决定变量与函数的可见性和生命周期。这对理解内存模型，内存回收，以及内存泄漏相关的问题很有帮助。而闭包是函数作用域下的产物，闭包会随着外层函数的执行而被同时创建，它是一个函数以及其捆绑的周边环境状态的引用的组合。换而言之，闭包是内层函数对外层函数变量的不释放，合理的使用闭包可以写出更为优雅的代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    
    <category term="JavaScript基础" scheme="http://example.com/tags/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android事件分发</title>
    <link href="http://example.com/2021/06/25/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://example.com/2021/06/25/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</id>
    <published>2021-06-25T13:25:00.000Z</published>
    <updated>2021-06-25T13:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>事件分发作为Android开发中最重要的知识体系之一，了解并熟悉整套的分发机制有助于更好的分析各种点击滑动失效问题，更好去扩展控件的事件功能和开发自定义控件，同时事件分发处理也作为Android面试必问考点之一，如果能有一个全面深入地了解肯定加分不少。总结：事件分发机制很重要</p><h1 id="一-事件分发流程"><a href="#一-事件分发流程" class="headerlink" title="一 事件分发流程"></a>一 事件分发流程</h1><img src="/2021/06/25/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/640.png" class="" title="事件分发流程泳道图"><p>流程概述：事件从底层传递到Activity，Activity会通过dispatchTouchEvent将事件传递到窗口对象PhoneWindow中，窗口对象调用superDispatchTouchEvent将事件传递给视图顶层ViewGroup(DecorView对象),ViewGroup会调用dispatchTouchEvent.此处DecorView不会拦截事件，会将事件传递给下一层ViewGroup，下层ViewGroup会通过onInterceptTouchEvent来判断是否拦截事件，如果父布局不拦截此事件，事件将传递给View控件。View控件通过调用onTouchEvent来判断是否消费此事件，如果事件不被消费将交由父布局的onTouchEvent来处理。如果父布局仍然不消费此事件，事件将交由Activity的onTouchEvent来处理。</p><h1 id="二-重要方法逻辑"><a href="#二-重要方法逻辑" class="headerlink" title="二 重要方法逻辑"></a>二 重要方法逻辑</h1><p>以上是对事件分发流程大体上的一个概述，其中还有许多细节需要我们来掌握，其中有三个重要的方法在整个流程中反复调用：<strong>dispatchTouchEvent</strong>，<strong>onInterceptTouchEvent</strong>，<strong>onTouchEvent</strong>.</p><h2 id="1-dispatchTouchEvent"><a href="#1-dispatchTouchEvent" class="headerlink" title="1.dispatchTouchEvent"></a>1.dispatchTouchEvent</h2><p>方法原型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> event The motion event to be dispatched</span></span><br><span class="line"><span class="comment"><span class="doctag">@return</span> True if the event was handled by the view, false otherwise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span><br></pre></td></tr></table></figure></p><p>分发触摸事件的逻辑，方法内部会调用<strong>onInterceptTouchEvent</strong>决定是否拦截事件，调用<strong>onTouchEvent</strong>决定是否消费事件</p><h2 id="2-onInterceptTouchEvent"><a href="#2-onInterceptTouchEvent" class="headerlink" title="2.onInterceptTouchEvent"></a>2.onInterceptTouchEvent</h2><p>方法原型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> ev The motion event being dispatched down the hierarchy</span></span><br><span class="line"><span class="comment"><span class="doctag">@return</span> Return true to steal motion events from the children and have</span></span><br><span class="line"><span class="comment">* them dispatched to this ViewGroup through onTouchEvent().</span></span><br><span class="line"><span class="comment">* The current target will receive an ACTION_CANCEL event, and no further</span></span><br><span class="line"><span class="comment">* messages will be delivered here.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span></span><br></pre></td></tr></table></figure><br>拦截事件逻辑。因为是ViewGroup对View的拦截。所以此方法只有ViewGroup才有，View是没有此事件的。同时通过注释可以知道，如果返回true的话，会走到自己的<strong>onTouchEvent</strong>方法。同时给子view发送一个<strong>ACTION_CANCEL</strong>取消事件。同时后面的事件消息将不会传递到这个方法了(一次拦截，一直拦截)。</p><h2 id="3-onTouchEvent"><a href="#3-onTouchEvent" class="headerlink" title="3.onTouchEvent"></a>3.onTouchEvent</h2><p>方法原型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @param event The motion event.</span></span><br><span class="line"><span class="comment"> * @return True if the event was handled, false otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span></span><br></pre></td></tr></table></figure><br>处理事件的逻辑。返回值代表是否消费此事件</p><p><strong>三个方法的总结：分发，拦截，处理(消费)</strong></p><h1 id="三-结合源码"><a href="#三-结合源码" class="headerlink" title="三 结合源码"></a>三 结合源码</h1><p>掌握了事件分发的基本逻辑后。不知道你是否思考过，</p><p>1.如果父布局不拦截ACTION_DOWN事件，只拦截ACTION_MOVE或截ACTION_UP事件会发生什么情况呢？<br>2.如果按下按钮后滑动离开按钮再松开会怎么样呢？<br>3.子父布局坐标系原点不一样的情况，事件坐标是如何处理的呢？<br>等等问题</p><p>要回答这些问题，只是以上的基本了解可能并不能很好地回答这些问题。想要了解这些问题，唯有深入源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">handled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> ev.getAction();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">actionMasked</span> <span class="operator">=</span> action &amp; MotionEvent.ACTION_MASK;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></span><br><span class="line">                <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></span><br><span class="line">                <span class="comment">// due to an app switch, ANR, or some other state change.</span></span><br><span class="line">                cancelAndClearTouchTargets(ev);</span><br><span class="line">                resetTouchState();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for interception.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> intercepted;</span><br><span class="line">            <span class="comment">//1.判断是否需要调用拦截</span></span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                    || mFirstTouchTarget != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//2.调用过requestDisallowInterceptTouchEvent(true)方法才会有FLAG_DISALLOW_INTERCEPT标志，</span></span><br><span class="line">                    <span class="comment">//默认disallowIntercept始终为false</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">disallowIntercept</span> <span class="operator">=</span> (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!disallowIntercept) &#123;</span><br><span class="line">                   <span class="comment">//3.拦截事件逻辑</span></span><br><span class="line">                    intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                    ev.setAction(action); <span class="comment">// restore action in case it was changed</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    intercepted = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// There are no touch targets and this action is not an initial down</span></span><br><span class="line">                <span class="comment">// so this view group continues to intercept touches.</span></span><br><span class="line">                intercepted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// Check for cancelation.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">canceled</span> <span class="operator">=</span> resetCancelNextUpFlag(<span class="built_in">this</span>)</span><br><span class="line">                    || actionMasked == MotionEvent.ACTION_CANCEL;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">//4.没有拦截</span></span><br><span class="line">            <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line">                <span class="comment">// If the event is targeting accessibility focus we give it to the</span></span><br><span class="line">                <span class="comment">// view that has accessibility focus and if it does not handle it</span></span><br><span class="line">                <span class="comment">// we clear the flag and dispatch the event to all children as usual.</span></span><br><span class="line">                <span class="comment">// We are looking up the accessibility focused host to avoid keeping</span></span><br><span class="line">                <span class="comment">// state since these events are very rare.</span></span><br><span class="line">                <span class="type">View</span> <span class="variable">childWithAccessibilityFocus</span> <span class="operator">=</span> ev.isTargetAccessibilityFocus()</span><br><span class="line">                        ? findChildWithAccessibilityFocus() : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                        || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">actionIndex</span> <span class="operator">=</span> ev.getActionIndex(); <span class="comment">// always 0 for down</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">idBitsToAssign</span> <span class="operator">=</span> split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex)</span><br><span class="line">                            : TouchTarget.ALL_POINTER_IDS;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Clean up earlier touch targets for this pointer id in case they</span></span><br><span class="line">                    <span class="comment">// have become out of sync.</span></span><br><span class="line">                    removePointersFromTouchTargets(idBitsToAssign);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childrenCount</span> <span class="operator">=</span> mChildrenCount;</span><br><span class="line">                    <span class="keyword">if</span> (newTouchTarget == <span class="literal">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">float</span> <span class="variable">x</span> <span class="operator">=</span></span><br><span class="line">                                isMouseEvent ? ev.getXCursorPosition() : ev.getX(actionIndex);</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span></span><br><span class="line">                                isMouseEvent ? ev.getYCursorPosition() : ev.getY(actionIndex);</span><br><span class="line">                        <span class="comment">// Find a child that can receive the event.</span></span><br><span class="line">                        <span class="comment">// Scan children from front to back.</span></span><br><span class="line">                        <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">customOrder</span> <span class="operator">=</span> preorderedList == <span class="literal">null</span></span><br><span class="line">                                &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">                        <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childIndex</span> <span class="operator">=</span> getAndVerifyPreorderedIndex(</span><br><span class="line">                                    childrenCount, i, customOrder);</span><br><span class="line">                            <span class="keyword">final</span> <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> getAndVerifyPreorderedView(</span><br><span class="line">                                    preorderedList, children, childIndex);</span><br><span class="line">                            <span class="comment">//5.可以接收事件，并且在点击范围</span></span><br><span class="line">                            <span class="keyword">if</span> (!child.canReceivePointerEvents()</span><br><span class="line">                                    || !isTransformedTouchPointInView(x, y, child, <span class="literal">null</span>)) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                             ...</span><br><span class="line">                             <span class="comment">//6.符合条件的child进行事件分发</span></span><br><span class="line">                            <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="literal">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                                <span class="comment">// Child wants to receive touch within its bounds.</span></span><br><span class="line">                                ...</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// The accessibility focus didn&#x27;t handle the event, so clear</span></span><br><span class="line">                            <span class="comment">// the flag and do a normal dispatch to all children.</span></span><br><span class="line">                            ev.setTargetAccessibilityFocus(<span class="literal">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (preorderedList != <span class="literal">null</span>) preorderedList.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                  ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Dispatch to touch targets.</span></span><br><span class="line">            <span class="keyword">if</span> (mFirstTouchTarget == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No touch targets so treat this as an ordinary view.</span></span><br><span class="line">                handled = dispatchTransformedTouchEvent(ev, canceled, <span class="literal">null</span>,</span><br><span class="line">                        TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Dispatch to touch targets, excluding the new touch target if we already</span></span><br><span class="line">                <span class="comment">// dispatched to it.  Cancel touch targets if necessary.</span></span><br><span class="line">                <span class="type">TouchTarget</span> <span class="variable">predecessor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">TouchTarget</span> <span class="variable">target</span> <span class="operator">=</span> mFirstTouchTarget;</span><br><span class="line">                <span class="keyword">while</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">TouchTarget</span> <span class="variable">next</span> <span class="operator">=</span> target.next;</span><br><span class="line">                    <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</span><br><span class="line">                        handled = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">cancelChild</span> <span class="operator">=</span> resetCancelNextUpFlag(target.child)</span><br><span class="line">                                || intercepted;</span><br><span class="line">                        <span class="comment">//7.child事件需要取消</span></span><br><span class="line">                        <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</span><br><span class="line">                                target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                            handled = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//8.回收touchTarget对象</span></span><br><span class="line">                        <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (predecessor == <span class="literal">null</span>) &#123;</span><br><span class="line">                                mFirstTouchTarget = next;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                predecessor.next = next;</span><br><span class="line">                            &#125;</span><br><span class="line">                            target.recycle();</span><br><span class="line">                            target = next;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    predecessor = target;</span><br><span class="line">                    target = next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="type">boolean</span> cancel,</span></span><br><span class="line"><span class="params">            View child, <span class="type">int</span> desiredPointerIdBits)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> handled;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">oldAction</span> <span class="operator">=</span> event.getAction();</span><br><span class="line">        <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">        <span class="comment">//9.给子child传递一个ACTION_CANCEL事件</span></span><br><span class="line">            event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">            <span class="keyword">if</span> (child == <span class="literal">null</span>) &#123;</span><br><span class="line">                handled = <span class="built_in">super</span>.dispatchTouchEvent(event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handled = child.dispatchTouchEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">            event.setAction(oldAction);</span><br><span class="line">            <span class="keyword">return</span> handled;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MotionEvent transformedEvent;</span><br><span class="line">        <span class="keyword">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child == <span class="literal">null</span> || child.hasIdentityMatrix()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child == <span class="literal">null</span>) &#123;</span><br><span class="line">                    handled = <span class="built_in">super</span>.dispatchTouchEvent(event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">offsetX</span> <span class="operator">=</span> mScrollX - child.mLeft;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">offsetY</span> <span class="operator">=</span> mScrollY - child.mTop;</span><br><span class="line">                    <span class="comment">//10.转换坐标</span></span><br><span class="line">                    event.offsetLocation(offsetX, offsetY);</span><br><span class="line"></span><br><span class="line">                    handled = child.dispatchTouchEvent(event);</span><br><span class="line"></span><br><span class="line">                    event.offsetLocation(-offsetX, -offsetY);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> handled;</span><br><span class="line">            &#125;</span><br><span class="line">            transformedEvent = MotionEvent.obtain(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            transformedEvent = event.split(newPointerIdBits);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br><strong>问题1：如果父布局不拦截ACTION_DOWN事件，只拦截ACTION_MOVE或截ACTION_UP事件会发生什么情况呢？</strong></p><p>父布局不拦截<strong>ACTION_DOWN</strong>事件，那么<strong>ACTION_DOWN</strong>事件会子view消费。同时子view会保存在<strong>mFirstTouchTarget</strong>中。第二次<strong>ACTION_MOVE</strong>事件来了之后<strong>onInterceptTouchEvent(ev)</strong>拦截了事件，返回<strong>true</strong>。注释4处判断不会进入，直接走到注释7处。同时传递了<strong>cancelChild</strong>为true。到注释9可以看到，会给子child传递一个<strong>ACTION_CANCEL</strong>事件。然后，子child在<strong>ACTION_CANCEL</strong>中做各种取消和重置处理。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">float</span> <span class="variable">x</span> <span class="operator">=</span> event.getX();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> event.getY();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">viewFlags</span> <span class="operator">=</span> mViewFlags;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> event.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">clickable</span> <span class="operator">=</span> ((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class="line">                || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class="line">                || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    <span class="keyword">if</span> ((viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">                    <span class="comment">//隐藏tooltip，延时1500ms</span></span><br><span class="line">                        handleTooltipUp();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        mInContextButtonPress = <span class="literal">false</span>;</span><br><span class="line">                        mHasPerformedLongPress = <span class="literal">false</span>;</span><br><span class="line">                        mIgnoreNextUpEvent = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">prepressed</span> <span class="operator">=</span> (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                        <span class="comment">// take focus if we don&#x27;t have it already and we should in</span></span><br><span class="line">                        <span class="comment">// touch mode.</span></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">focusTaken</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class="line">                            focusTaken = requestFocus();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                            <span class="comment">// The button is being released before we actually</span></span><br><span class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></span><br><span class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></span><br><span class="line">                            <span class="comment">// the user sees it.</span></span><br><span class="line">                            <span class="comment">//如果有预按下标记，但是抬起时(由于抬起过早)还没清除此标记，需要设置为按压态</span></span><br><span class="line">                            setPressed(<span class="literal">true</span>, x, y);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></span><br><span class="line">                            removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></span><br><span class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line">                                <span class="comment">// of the view update before click actions start.</span></span><br><span class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    mPerformClick = <span class="keyword">new</span> <span class="title class_">PerformClick</span>();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//点击事件处理</span></span><br><span class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                    performClickInternal();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (mUnsetPressedState == <span class="literal">null</span>) &#123;</span><br><span class="line">                            mUnsetPressedState = <span class="keyword">new</span> <span class="title class_">UnsetPressedState</span>();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                        <span class="comment">//64ms延时，按下状态置为false</span></span><br><span class="line">                            postDelayed(mUnsetPressedState,</span><br><span class="line">                                    ViewConfiguration.getPressedStateDuration());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</span><br><span class="line">                            <span class="comment">// If the post failed, unpress right now</span></span><br><span class="line">                            mUnsetPressedState.run();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//清除预按下flag</span></span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                    &#125;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                    <span class="keyword">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</span><br><span class="line">                        mPrivateFlags3 |= PFLAG3_FINGER_DOWN; </span><br><span class="line">                    &#125;</span><br><span class="line">                    mHasPerformedLongPress = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                    <span class="comment">//长按runnable</span></span><br><span class="line">                        checkForLongClick(</span><br><span class="line">                                ViewConfiguration.getLongPressTimeout(),</span><br><span class="line">                                x,</span><br><span class="line">                                y,</span><br><span class="line">                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Walk up the hierarchy to determine if we&#x27;re inside a scrolling container.</span></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isInScrollingContainer</span> <span class="operator">=</span> isInScrollingContainer();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></span><br><span class="line">                    <span class="comment">// a short period in case this is a scroll.</span></span><br><span class="line">                    <span class="keyword">if</span> (isInScrollingContainer) &#123;</span><br><span class="line">                    <span class="comment">//如果在滑动控件里面，设置预按下flag</span></span><br><span class="line">                        mPrivateFlags |= PFLAG_PREPRESSED;</span><br><span class="line">                        <span class="keyword">if</span> (mPendingCheckForTap == <span class="literal">null</span>) &#123;</span><br><span class="line">                            mPendingCheckForTap = <span class="keyword">new</span> <span class="title class_">CheckForTap</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPendingCheckForTap.x = event.getX();</span><br><span class="line">                        mPendingCheckForTap.y = event.getY();</span><br><span class="line">                        <span class="comment">//预按下flag标记清除</span></span><br><span class="line">                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></span><br><span class="line">                        setPressed(<span class="literal">true</span>, x, y);</span><br><span class="line">                        checkForLongClick(</span><br><span class="line">                                ViewConfiguration.getLongPressTimeout(),</span><br><span class="line">                                x,</span><br><span class="line">                                y,</span><br><span class="line">                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="comment">//重置各种状态和移除runnable</span></span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                        setPressed(<span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    mInContextButtonPress = <span class="literal">false</span>;</span><br><span class="line">                    mHasPerformedLongPress = <span class="literal">false</span>;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="literal">false</span>;</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                    ...</span><br><span class="line">                    <span class="comment">//11.离开区域</span></span><br><span class="line">                    <span class="keyword">if</span> (!pointInView(x, y, touchSlop)) &#123;</span><br><span class="line">                        <span class="comment">// Outside button</span></span><br><span class="line">                        <span class="comment">// Remove any future long press/tap checks</span></span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                            setPressed(<span class="literal">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">deepPress</span> <span class="operator">=</span></span><br><span class="line">                            motionClassification == MotionEvent.CLASSIFICATION_DEEP_PRESS;</span><br><span class="line">                    <span class="keyword">if</span> (deepPress &amp;&amp; hasPendingLongPressCallback()) &#123;</span><br><span class="line">                        <span class="comment">// process the long click action immediately</span></span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        checkForLongClick(</span><br><span class="line">                                <span class="number">0</span> <span class="comment">/* send immediately */</span>,</span><br><span class="line">                                x,</span><br><span class="line">                                y,</span><br><span class="line">                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__DEEP_PRESS);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>问题2:如果按下按钮后滑动离开按钮再松开会怎么样呢？</strong></p><p>注释11处<strong>pointInView(x, y, touchSlop)</strong>会判断点击区域是否在响应区域。当手划出点击view区域时会移除掉各种callback,并且接下来的ACTION_UP事件在注释5处就会过滤掉，无法传递给子view。相应的按钮的点击事件(ACTION_UP中)也无法响应。但是各种状已经在<strong>ACTION_MOVE</strong>中重置了。</p><p><strong>问题3:子父布局坐标系原点不一样的情况，事件坐标是如何处理的呢？</strong></p><p>注释11处通过<strong>mScrollX - child.mLeft</strong>得到在child中的相对x坐标，通过<strong>mScrollY - child.mTop</strong>得到在child中的相对y坐标。然后通过<strong>event.offsetLocation(offsetX, offsetY)</strong>赋值给event。然后分发给子view。</p><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四 总结"></a>四 总结</h1><p>Android事件分发流程 = Activity -&gt;Window-&gt; ViewGroup -&gt; View，即：1个点击事件发生后，事件先传到Activity、再传到Window、再传到ViewGroup、最终再传到View。<br>事件分发的方法主要包括：<strong>dispatchTouchEvent()</strong>、<strong>dispatchTransformedTouchEvent</strong>、<strong>onInterceptTouchEvent()</strong>和<strong>onTouchEvent()</strong>。</p>]]></content>
    
    
    <summary type="html">事件分发作为Android开发中最重要的知识体系之一，了解并熟悉整套的分发机制有助于更好的分析各种点击滑动失效问题，更好去扩展控件的事件功能和开发自定义控件，同时事件分发处理也作为Android面试必问考点之一，如果能有一个全面深入地了解肯定加分不少。总结：事件分发机制很重要</summary>
    
    
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/05/07/hello-world/"/>
    <id>http://example.com/2020/05/07/hello-world/</id>
    <published>2020-05-07T13:05:08.000Z</published>
    <updated>2020-05-07T13:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
